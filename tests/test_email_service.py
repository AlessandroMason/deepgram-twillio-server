#!/usr/bin/env python3
"""
Test script for the Email Service
"""

import os
import sys
import json
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ..services.email_service import EmailService

def test_email_service():
    """
    Test the email service functionality
    """
    print("=== Testing Email Service ===")
    
    # Check if required environment variables are set
    openai_key = os.getenv("OPENAI_API_KEY")
    
    if not openai_key:
        print("❌ OPENAI_API_KEY environment variable not set")
        print("Please set it to your OpenAI API key")
        print("Example: export OPENAI_API_KEY='your-openai-api-key'")
        return False
    
    print(f"✅ Using OpenAI API key: {openai_key[:10]}...")
    print(f"✅ Using Gmail: axm2022@case.edu")
    print(f"✅ Using Gmail password: iwtn sges urbz tkuo")
    
    try:
        # Initialize the service
        print("🔄 Initializing email service...")
        service = EmailService()
        print("✅ Email service initialized")
        
        # Test 1: Email content generation
        print("\n=== TEST 1: Email Content Generation ===")
        recipient = "test@example.com"
        description = "Follow up on the meeting we had yesterday about the project timeline"
        context = "User had a productive meeting about project milestones"
        
        email_content = service.generate_email_content(recipient, description, context)
        print(f"✅ Generated email content:")
        print(f"📧 Subject: {email_content['subject']}")
        print(f"📝 Body: {email_content['body'][:200]}...")
        
        # Test 2: Email info extraction
        print("\n=== TEST 2: Email Info Extraction ===")
        test_messages = [
            "send an email to john.doe@company.com with all the details about the project update",
            "email sarah@example.org about the meeting tomorrow",
            "write an email to team@startup.io with the quarterly report",
            "compose an email to client@business.com regarding the contract"
        ]
        
        for i, message in enumerate(test_messages, 1):
            recipient, description = service._extract_email_info(message)
            print(f"  {i}. Message: {message}")
            print(f"     Recipient: {recipient}")
            print(f"     Description: {description}")
            print()
        
        # Test 3: Full email processing (save as draft)
        print("\n=== TEST 3: Email Processing (Save as Draft) ===")
        test_message = "send an email to demo@example.com with all the details about the new feature launch"
        context = "User has been working on a new feature and wants to announce it to stakeholders"
        
        print(f"🔄 Processing: {test_message}")
        
        result = service.process_email_request(test_message, context, send_email=False)
        
        if result["success"]:
            print(f"✅ Email {result['action']} successfully!")
            print(f"�� To: {test_message.split('to ')[1].split(' with')[0]}")
            print(f"📧 Subject: {result['subject']}")
            print(f"📝 Preview: {result['preview']}")
        else:
            print(f"❌ Error: {result['error']}")
            print(f"💬 Message: {result['message']}")
        
        # Test 4: Error handling
        print("\n=== TEST 4: Error Handling ===")
        invalid_message = "send an email with no recipient"
        recipient, description = service._extract_email_info(invalid_message)
        print(f"Invalid message: {invalid_message}")
        print(f"Recipient: {recipient}")
        print(f"Description: {description}")
        
        return True
        
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_gmail_integration():
    """
    Test Gmail integration (requires actual credentials)
    """
    print("\n=== TESTING GMAIL INTEGRATION ===")
    print("⚠️  This test will send an actual email to test@example.com")
    print("⚠️  Make sure your Gmail app password is correct")
    
    response = input("Do you want to proceed with Gmail integration test? (y/N): ")
    if response.lower() != 'y':
        print("⏭️  Skipping Gmail integration test")
        return True
    
    try:
        service = EmailService()
        
        # Test sending an email
        test_message = "send an email to test@example.com with a test message"
        context = "This is a test email generated by the AI assistant"
        
        result = service.process_email_request(test_message, context, send_email=True)
        
        if result["success"]:
            print("✅ Gmail integration test successful!")
            print(f"📧 Email {result['action']}: {result['message']}")
            print(f"📧 Subject: {result['subject']}")
            print(f"📝 Preview: {result['preview']}")
        else:
            print(f"❌ Gmail integration test failed: {result['error']}")
            return False
        
        return True
        
    except Exception as e:
        print(f"❌ Gmail integration test error: {e}")
        return False

def main():
    """
    Main function to run the tests
    """
    print("Email Service Test")
    print("=" * 50)
    
    # Test basic functionality
    success = test_email_service()
    
    if success:
        print("\n✅ Basic tests completed successfully!")
        
        # Test Gmail integration if user wants
        gmail_success = test_gmail_integration()
        
        if gmail_success:
            print("\n🎉 All tests completed successfully!")
            print("\n📋 To use the email service:")
            print("1. Set OPENAI_API_KEY environment variable")
            print("2. Run: python services/email_service.py")
            print("3. Emails will be saved as drafts in the 'drafts' folder")
        else:
            print("\n⚠️  Basic tests passed, but Gmail integration failed")
            print("Check your Gmail app password")
    else:
        print("\n❌ Tests failed. Please check the error messages above.")
        sys.exit(1)

if __name__ == "__main__":
    main()
